{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stringify","data","JSON","shuffle","a","j","x","i","length","Math","floor","random","Array","prototype","this","String","format","args","arguments","replace","m","n","Tile","bg","props","clicked","className","onClick","onContextMenu","event","preventDefault","onRightClick","text","React","Component","TextBox","type","onChange","e","id","placeholder","Board","version","hasSeenWordListWarning","veryBigSize","defaultSize","template","state","wordList","title","size","tiles","pow","fill","save","FileSaver","require","blob","Blob","saveAs","setState","target","value","prompt","slice","words","split","pop","getTotalTiles","alert","_","sample","mode","newWindow","window","open","document","write","newData","parse","newSize","parseInt","confirm","tile","handleClick","handleRightClick","input","$","val","items","tbodies","push","key","renderTile","index","y","row","z","changeTitle","updateWordList","randomizeFromWordPool","changeSize","randomizeTileOrder","saveBoard","loadBoard","saveWordList","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d41467fb.chunk.js","sourcesContent":["import React from 'react'; // todo merge wordlist with board info into 1 save\nimport './App.css'; // todo fix resizing tiles\nimport $ from \"jquery\";\nimport _ from 'lodash'\n\nfunction stringify(data) {\n  return JSON.stringify(data);\n}\n\nfunction unstringify(data) {\n  return JSON.parse(data);\n}\n\nfunction save(key, content) {\n  localStorage.setItem(key, content);\n}\n\nfunction load(key) {\n  return localStorage.getItem(key);\n}\n\n// from https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array\nArray.prototype.random = function () {\n  return this[Math.floor((Math.random()*this.length))];\n}\n\nfunction shuffle(a) { // by https://stackoverflow.com/users/353278/jeff\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n  }\n  return a;\n}\n\nString.prototype.format = function () { // by gpvos from stackoverflow\n  var args = arguments;\n  return this.replace(/\\{(\\d+)\\}/g, function (m, n) { return args[n]; });\n};\n\nclass Tile extends React.Component {\n  render() {\n    var bg = this.props.clicked ? \"tile-bg-clicked\" : \"tile-bg\";\n    return (\n      <div className={\"tile \" + bg} onClick={() => this.props.onClick()} onContextMenu={(event) => {event.preventDefault(); this.props.onRightClick();}}>\n        <p>{this.props.text}</p>\n      </div>\n    );\n  }\n}\n\nclass TextBox extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <textarea className=\"text-field\" type=\"text\" onChange={(e) => this.props.onChange(e)} id=\"word_pool\" placeholder=\"Enter words here to create randomized boards from a word list! Separate words with a new line.\"/>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.version = \"v0.1.1\";\n    this.hasSeenWordListWarning = false;\n    this.veryBigSize = 10;\n    this.defaultSize = 3;\n    this.template = {\n      clicked: false,\n      text: \"Right-click to change text\",\n    }\n\n    this.state = {\n        wordList: \"\",\n        title: \"Pinewood Bingo App {0} - Click to edit title\".format(this.version),\n        size: this.defaultSize,\n        tiles: Array(Math.pow(this.defaultSize, 2)).fill(this.template),\n    }\n  }\n\n  saveWordList() {\n    var save = this.state.wordList;\n\n    var FileSaver = require('file-saver');\n    var blob = new Blob([save], {type: \"text/plain;charset=utf-8\"});\n    FileSaver.saveAs(blob, \"word_list.txt\");\n  }\n\n  updateWordList(e) {\n    this.setState({\n      wordList: e.target.value,\n    })\n  }\n\n  changeTitle() { // todo make the area a set size, so you can fix the title if you input ' '\n    var title = prompt(\"Enter a title for the board:\");\n\n    if (title == null || title == \"\") {\n      return;\n    }\n\n    this.setState({\n      title: title,\n    })\n  }\n\n  getTotalTiles() {\n    return Math.pow(this.state.size, 2)\n  }\n\n  resetClickedTiles() {\n    const tiles = this.state.tiles.slice();\n    for (var x = 0; x < tiles.length; x++) {\n      tiles[x] = {\n        clicked: false,\n        text: tiles[x].text,\n      }\n    }\n    this.setState({\n      size: this.state.size,\n      tiles: tiles,\n    })\n  }\n\n  randomizeFromWordPool() { // todo remove empty lines\n    var pool = this.state.wordList;\n    var words = pool.split(/\\r\\n|\\r|\\n/)\n    const tiles = this.state.tiles.slice();\n    \n    if (words[0] == \"\")\n      return;\n    if (words[words.length-1] == \"\")\n      words.pop();\n    if (words.length < this.getTotalTiles() && !this.hasSeenWordListWarning) {\n      this.hasSeenWordListWarning = true;\n      alert(\"Warning:\\nThe word list has fewer words than tiles in the board.\")\n    }\n\n    words = shuffle(words);\n\n    for (var x = 0; x < this.getTotalTiles(); x++) {\n      tiles[x] = {\n        clicked: false,\n        text: _.sample(words),\n      };\n    }\n\n    this.setState({\n      size: this.state.size,\n      tiles: tiles,\n    })\n\n    //this.resetClickedTiles();\n  }\n\n  randomizeTileOrder() {\n    this.setState({\n      size: this.state.size,\n      tiles: shuffle(this.state.tiles),\n    })\n  }\n\n  saveBoard(mode=\"toFile\") { // todo add option to use toText\n    var save = stringify(this.state);\n\n    if (mode == \"toFile\") {\n      var FileSaver = require('file-saver');\n      var blob = new Blob([save], {type: \"text/plain;charset=utf-8\"});\n      FileSaver.saveAs(blob, \"board.txt\");\n    }\n    else if (mode == \"toText\") {\n      var newWindow = window.open(\"\");\n      newWindow.document.write(save);\n    }\n  }\n\n  loadBoard() {\n    var newData = prompt(\"Paste in a saved board.\\nThis function has no error handling so don't try stupid shit.\")\n\n    if (newData == null)\n      return;\n\n    this.setState(unstringify(newData))\n  }\n\n  changeSize() {\n    var newSize = parseInt(prompt(\"Enter new size for the board:\"))\n\n    if (newSize == null || newSize == \"\" || newSize < 1) {\n      alert(\"Invalid size; don't be stupid\")\n      return;\n    }\n    else if (newSize > this.veryBigSize) {\n      if (!window.confirm(\"You're creating a very large board (\" + newSize + \"x\" + newSize +\").\\nAre you sure you want to do that?\"))\n        return;\n    }\n\n    this.setState({\n      size: newSize,\n      tiles: Array(Math.pow(newSize, 2)).fill(this.template),\n    })\n  }\n\n  renderTile(i) {\n    const tile = this.state.tiles[i];\n    return (<Tile\n      clicked={tile.clicked}\n      text={tile.text}\n      onClick={() => this.handleClick(i)}\n      onRightClick={() => this.handleRightClick(i)}\n      />\n    )\n  }\n\n  handleRightClick(i) {\n    const tiles = this.state.tiles.slice();\n    var input = prompt(\"Enter text for this tile:\");\n\n    if (input == null || input == \"\")\n      return;\n\n    // todo check for duplicates\n    if ($(\"#word_pool\").val() == \"\")\n      $(\"#word_pool\").val($(\"#word_pool\").val() + input)\n    else\n      $(\"#word_pool\").val($(\"#word_pool\").val() + \"\\n\" + input)\n\n    tiles[i] = {\n      clicked: tiles[i].clicked,\n      text: input,\n    };\n\n    this.setState({\n      size: this.state.size,\n      tiles: tiles,\n    })\n  }\n\n  handleClick(i) {\n    const tiles = this.state.tiles.slice();\n\n    tiles[i] = {\n      clicked: !tiles[i].clicked,\n      text: tiles[i].text,\n    };\n\n    this.setState({\n      size: this.state.size,\n      tiles: tiles,\n    })\n  }\n\n  render() {\n    const items = [];\n    const tbodies = [];\n    for (var x = 0; x < Math.pow(this.state.size, 2); x++) {\n      items.push(\n        <th key={x}>{this.renderTile(x)}</th>\n      )\n    }\n\n    var index = 0;\n    for (var y = 0; y < this.state.size; y++) {\n      const row = []\n      for (var z = 0; z < this.state.size; z++) {\n        row.push(items[index]);\n        index++;\n      }\n      tbodies.push(\n        <tr key={y}>{row}</tr>\n      )\n    }\n\n    return (\n      <div className=\"flex-main\">\n        <div>\n          <h1 onClick={() => this.changeTitle()}>{this.state.title}</h1>\n          <table className=\"tile-holder\">\n            <tbody>\n              {tbodies}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"right-panel\">\n          <TextBox onChange={(e) => this.updateWordList(e)}/>\n          <div className=\"button-bar\">\n            <button className=\"large-button\" onClick={() => this.randomizeFromWordPool()}>Generate Board from Word List</button>\n            <button onClick={() => this.changeSize()}>Change Size</button>\n            <button onClick={() => this.randomizeTileOrder()}>Shuffle Tiles</button>\n            <button onClick={() => this.saveBoard()}>Save Board</button>\n            <button onClick={() => this.loadBoard()}>Load Board</button>\n            <button onClick={() => this.saveWordList()}>Save Word List</button>\n            {/* <button onClick={() => this.loadWordList()}>Load Word List</button> */}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"flex-center-column\">\n        <Board/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport $ from \"jquery\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}