{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stringify","data","JSON","shuffle","a","j","x","i","length","Math","floor","random","Array","prototype","this","String","format","args","arguments","replace","m","n","Tile","bg","props","clicked","realText","useNumbers","number","text","largeText","freeSpace","className","onClick","onContextMenu","event","preventDefault","onRightClick","React","Component","TextBox","type","onChange","e","id","placeholder","Board","version","veryBigSize","defaultSize","template","state","wordList","title","size","minNumber","maxNumber","tiles","pow","fill","save","FileSaver","require","blob","Blob","saveAs","setState","target","value","prompt","slice","words","split","pop","getTotalTiles","hasSeenWordListWarning","alert","word","_","sample","filter","mode","newWindow","window","open","document","write","$","prop","file","FileReader","parse","val","newSize","parseInt","confirm","tile","handleClick","handleRightClick","input","numbersUsed","undefined","totalTiles","num","includes","push","toggleNumberMode","newState","randomizeNumbers","items","tbodies","key","renderTile","index","y","row","z","changeTitle","updateWordList","randomizeFromWordPool","changeSize","randomizeTileOrder","saveBoard","click","loadBoard","accept","checked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAKA,SAASA,EAAUC,GACjB,OAAOC,KAAKF,UAAUC,GAoBxB,SAASE,EAAQC,GACf,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAIH,EAAEI,OAAS,EAAGD,EAAI,EAAGA,IAC1BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIF,EAAEG,GACNH,EAAEG,GAAKH,EAAEC,GACTD,EAAEC,GAAKC,EAEX,OAAOF,EAZTQ,MAAMC,UAAUF,OAAS,WACvB,OAAOG,KAAKL,KAAKC,MAAOD,KAAKE,SAASG,KAAKN,UAc7CO,OAAOF,UAAUG,OAAS,WACxB,IAAIC,EAAOC,UACX,OAAOJ,KAAKK,QAAQ,cAAc,SAAUC,EAAGC,GAAK,OAAOJ,EAAKI,O,IAG5DC,E,uKACM,IAAD,OACHC,EAAKT,KAAKU,MAAMC,QAAU,kBAAoB,UAE9CC,EAAWZ,KAAKU,MAAMG,WAAab,KAAKU,MAAMI,OAASd,KAAKU,MAAMK,KAIlEC,GAHAJ,EAAWZ,KAAKU,MAAMO,UAAY,cAAgBL,EAGrCZ,KAAKU,MAAMG,WAAc,aAAe,IAEzD,OACE,yBAAKK,UAAW,QAAUT,EAAIU,QAAS,kBAAM,EAAKT,MAAMS,WAAWC,cAAe,SAACC,GAAWA,EAAMC,iBAAkB,EAAKZ,MAAMa,iBAC/H,uBAAGL,UAAWF,GAAYJ,Q,GAZfY,IAAMC,WAkBnBC,E,kDACJ,WAAYhB,GAAQ,uCACZA,G,qDAGE,IAAD,OACP,OACE,8BAAUQ,UAAU,aAAaS,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAO,EAAKnB,MAAMkB,SAASC,IAAIC,GAAG,YAAYC,YAAY,uG,GAPjGP,IAAMC,WAYtBO,E,kDACJ,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAEDuB,QAAU,SACf,EAAKC,YAAc,GACnB,EAAKC,YAAc,EACnB,EAAKC,SAAW,CACdzB,SAAS,EACTI,KAAM,6BACND,OAAQ,MAGV,EAAKuB,MAAQ,CACTC,SAAU,GAEVC,MAAO,2CACPC,KAAM,EAAKL,YACXlB,WAAW,EACXJ,YAAY,EACZ4B,UAAW,EACXC,UAAW,IACXC,MAAO7C,MAAMH,KAAKiD,IAAI,EAAKT,YAAa,IAAIU,KAAK,EAAKT,WArBzC,E,2DA+BjB,IAAIU,EAAO9C,KAAKqC,MAAMC,SAElBS,EAAYC,EAAQ,IACpBC,EAAO,IAAIC,KAAK,CAACJ,GAAO,CAACnB,KAAM,6BACnCoB,EAAUI,OAAOF,EAAM,mB,qCAGVpB,GACb7B,KAAKoD,SAAS,CACZd,SAAUT,EAAEwB,OAAOC,U,oCAKrB,IAAIf,EAAQgB,OAAO,gCAEN,MAAThB,GAA0B,IAATA,GAIrBvC,KAAKoD,SAAS,CACZb,MAAOA,M,sCAKT,OAAO5C,KAAKiD,IAAI5C,KAAKqC,MAAMG,KAAM,K,0CAKjC,IADA,IAAMG,EAAQ3C,KAAKqC,MAAMM,MAAMa,QACtBhE,EAAI,EAAGA,EAAImD,EAAMjD,OAAQF,IAChCmD,EAAMnD,GAAK,CACTmB,SAAS,EACTI,KAAM4B,EAAMnD,GAAGuB,MAGnBf,KAAKoD,SAAS,CACZZ,KAAMxC,KAAKqC,MAAMG,KACjBG,MAAOA,M,8CAKT,IACIc,EADOzD,KAAKqC,MAAMC,SACLoB,MAAM,cACjBf,EAAQ3C,KAAKqC,MAAMM,MAAMa,QAE/B,GAAgB,IAAZC,EAAM,GAIV,GAF6B,IAAzBA,EAAMA,EAAM/D,OAAO,IACrB+D,EAAME,MACJF,EAAM/D,OAASM,KAAK4D,kBAAoB5D,KAAK6D,uBAC/CC,MAAM,8DADR,CAKAL,EAAQpE,EAAQoE,GAEhB,IAAK,IAAIjE,EAAI,EAAGA,EAAIQ,KAAK4D,gBAAiBpE,IAAK,CAC7C,IAAIuE,EAAOC,IAAEC,OAAOR,GACpBd,EAAMnD,GAAK,CACTmB,SAAS,EACTI,KAAMgD,GAERN,EAAQA,EAAMS,QAAO,SAASZ,GAAQ,OAAOA,GAASS,KAGxD/D,KAAKoD,SAAS,CACZZ,KAAMxC,KAAKqC,MAAMG,KACjBG,MAAOA,O,2CAOT3C,KAAKoD,SAAS,CACZZ,KAAMxC,KAAKqC,MAAMG,KACjBG,MAAOtD,EAAQW,KAAKqC,MAAMM,W,kCAIJ,IAAhBwB,EAAe,uDAAV,SACTrB,EAAO5D,EAAUc,KAAKqC,OAE1B,GAAY,UAAR8B,EAAkB,CACpB,IAAIpB,EAAYC,EAAQ,IACpBC,EAAO,IAAIC,KAAK,CAACJ,GAAO,CAACnB,KAAM,6BACnCoB,EAAUI,OAAOF,EAAM,kBAEpB,GAAY,UAARkB,EAAkB,CACzB,IAAIC,EAAYC,OAAOC,KAAK,IAC5BF,EAAUG,SAASC,MAAM1B,M,yEAIbjB,G,8EACV4C,IAAE,gBAAgBC,KAAK,SAAShF,OAAS,G,wBACvCiF,EAAOF,IAAE,gBAAgBC,KAAK,SAAS,GAC9B,IAAIE,W,SACAD,EAAK5D,O,OAAlBA,E,OACJf,KAAKoD,UArMUjE,EAqMW4B,EApMvB3B,KAAKyF,MAAM1F,KAuMdsF,IAAE,cAAcK,IAAI9E,KAAKqC,MAAMC,UAC/BmC,IAAE,sBAAsBC,KAAK,UAAW1E,KAAKqC,MAAMpB,WACnDwD,IAAE,uBAAuBC,KAAK,UAAW1E,KAAKqC,MAAMxB,YACpD4D,IAAE,sBAAsBK,IAAI9E,KAAKqC,MAAMI,WACvCgC,IAAE,sBAAsBK,IAAI9E,KAAKqC,MAAMK,W,kCA5M7C,IAAqBvD,I,sGAiNjB,IAAI4F,EAAUC,SAASzB,OAAO,kCAEf,MAAXwB,GAA8B,IAAXA,GAAiBA,EAAU,EAChDjB,MAAM,iCAGCiB,EAAU/E,KAAKkC,cACjBmC,OAAOY,QAAQ,uCAAyCF,EAAU,IAAMA,EAAS,0CAIxF/E,KAAKoD,SAAS,CACZZ,KAAMuC,EACNpC,MAAO7C,MAAMH,KAAKiD,IAAImC,EAAS,IAAIlC,KAAK7C,KAAKoC,c,iCAItC3C,GAAI,IAAD,OACNyF,EAAOlF,KAAKqC,MAAMM,MAAMlD,GAE1BwB,GAAY,EAQhB,OANItB,KAAKC,MAAOD,KAAKiD,IAAI5C,KAAKqC,MAAMG,KAAM,GAAM,IAAM/C,GAAKO,KAAKqC,MAAMpB,WAAajB,KAAKqC,MAAMG,KAAO,GAAK,IACxGvB,GAAY,GAKN,kBAAC,EAAD,CACNN,QAASuE,EAAKvE,QACdM,UAAaA,EACbJ,WAAYb,KAAKqC,MAAMxB,WACvBC,OAAQoE,EAAKpE,OACbC,KAAMmE,EAAKnE,KACXI,QAAS,kBAAM,EAAKgE,YAAY1F,IAChC8B,aAAc,kBAAM,EAAK6D,iBAAiB3F,Q,uCAK7BA,GACf,IAAMkD,EAAQ3C,KAAKqC,MAAMM,MAAMa,QAC3B6B,EAAQ9B,OAAO,6BAEN,MAAT8B,GAA0B,IAATA,IAIQ,IAAzBZ,IAAE,cAAcK,MAClBL,IAAE,cAAcK,IAAIL,IAAE,cAAcK,MAAQO,GAE5CZ,IAAE,cAAcK,IAAIL,IAAE,cAAcK,MAAQ,KAAOO,GAErD1C,EAAMlD,GAAK,CACTkB,QAASgC,EAAMlD,GAAGkB,QAClBI,KAAMsE,GAGRrF,KAAKoD,SAAS,CACZZ,KAAMxC,KAAKqC,MAAMG,KACjBG,MAAOA,O,kCAIClD,GACV,IAAMkD,EAAQ3C,KAAKqC,MAAMM,MAAMa,QAE/Bb,EAAMlD,GAAK,CACTkB,SAAUgC,EAAMlD,GAAGkB,QACnBI,KAAM4B,EAAMlD,GAAGsB,KACfD,OAAQ6B,EAAMlD,GAAGqB,QAGnBd,KAAKoD,SAAS,CACZZ,KAAMxC,KAAKqC,MAAMG,KACjBG,MAAOA,M,uCAIMd,GACf,IAAMc,EAAQ3C,KAAKqC,MAAMM,MAAMa,QAC3B8B,EAAc,GAGlB,GAAKtF,KAAKqC,MAAMxB,iBAAmB0E,GAAL1D,EAM9B,GAAI7B,KAAKqC,MAAMK,UAAY1C,KAAKqC,MAAMI,UAAY,EAAIzC,KAAKwF,WACzD1B,MAAM,mFADR,CAKA,IAAK,IAAItE,EAAI,EAAGA,EAAIQ,KAAKwF,WAAYhG,IAAK,CAIxC,IAHA,IAAIiG,IAMF,GAFAA,EAAMzB,IAAEnE,OAAOG,KAAKqC,MAAMI,UAAWzC,KAAKqC,MAAMK,YAE3C4C,EAAYI,SAASD,GAAM,CAC9BH,EAAYK,KAAKF,GACjB,MAIJ9C,EAAMnD,GAAK,CACTmB,QAASgC,EAAMnD,GAAGmB,QAClBI,KAAM4B,EAAMnD,GAAGuB,KACfD,OAAQ2E,GAOZzF,KAAKoD,SAAS,CACZT,MAAOA,SAlCP3C,KAAK4F,kBAAiB,K,uCAsCTC,GACXA,GACF7F,KAAK8F,mBACP9F,KAAKoD,SAAS,CAACvC,WAAYgF,M,+BAM3B,IAHQ,IAAD,OACDE,EAAQ,GACRC,EAAU,GACPxG,EAAI,EAAGA,EAAIG,KAAKiD,IAAI5C,KAAKqC,MAAMG,KAAM,GAAIhD,IAChDuG,EAAMJ,KACJ,wBAAIM,IAAKzG,GAAIQ,KAAKkG,WAAW1G,KAKjC,IADA,IAAI2G,EAAQ,EACHC,EAAI,EAAGA,EAAIpG,KAAKqC,MAAMG,KAAM4D,IAAK,CAExC,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAItG,KAAKqC,MAAMG,KAAM8D,IACnCD,EAAIV,KAAKI,EAAMI,IACfA,IAEFH,EAAQL,KACN,wBAAIM,IAAKG,GAAIC,IAIjB,OACE,yBAAKnF,UAAU,aACb,6BACE,wBAAIC,QAAS,kBAAM,EAAKoF,gBAAgBvG,KAAKqC,MAAME,OACnD,2BAAOrB,UAAU,eACf,+BACG8E,KAIP,yBAAK9E,UAAU,eACb,kBAAC,EAAD,CAASU,SAAU,SAACC,GAAD,OAAO,EAAK2E,eAAe3E,MAC9C,yBAAKX,UAAU,cACb,4BAAQA,UAAU,eAAeC,QAAS,kBAAM,EAAKsF,0BAArD,iCACA,4BAAQtF,QAAS,kBAAM,EAAKuF,eAA5B,eACA,4BAAQvF,QAAS,kBAAM,EAAKwF,uBAA5B,iBACA,4BAAQxF,QAAS,kBAAM,EAAKyF,cAA5B,cACA,4BAAQzF,QAAS,kBAAMsD,IAAE,gBAAgBoC,UAAzC,cACA,2BAAOjF,SAAU,SAACC,GAAD,OAAO,EAAKiF,UAAUjF,IAAIX,UAAU,SAASS,KAAK,OAAOoF,OAAO,OAAOjF,GAAG,gBAE3F,yBAAKZ,UAAU,YACb,2BAAOY,GAAG,oBAAoBF,SAAU,SAACC,GAAO,EAAKuB,SAAS,CAACnC,UAAWY,EAAEwB,OAAO2D,WAAY9F,UAAU,GAAGS,KAAK,aACjH,0CAEF,yBAAKT,UAAU,YACb,2BAAOY,GAAG,qBAAqBF,SAAU,SAACC,GAAO,EAAK+D,iBAAiB/D,EAAEwB,OAAO2D,UAAW9F,UAAU,GAAGS,KAAK,aAC7G,2CAEF,yBAAKT,UAAU,YACb,mCACA,2BAAOY,GAAG,oBAAoBF,SAAU,SAACC,GAAO,EAAKuB,SAAS,CAACX,UAAWZ,EAAEwB,OAAOC,SAAUpC,UAAU,eAAeS,KAAK,SAAS2B,MAAOtD,KAAKqC,MAAMI,aAExJ,yBAAKvB,UAAU,YACb,mCACA,2BAAOY,GAAG,oBAAoBF,SAAU,SAACC,GAAO,EAAKuB,SAAS,CAACV,UAAWb,EAAEwB,OAAOC,SAAUpC,UAAU,eAAeS,KAAK,SAAS2B,MAAOtD,KAAKqC,MAAMK,aAExJ,yBAAKxB,UAAU,mBACf,4BAAQC,QAAS,SAACU,GAAD,OAAO,EAAKiE,iBAAiBjE,KAA9C,2B,iCAjTR,OAAOlC,KAAKiD,IAAI5C,KAAKqC,MAAMG,KAAM,O,GA5BjBhB,IAAMC,WAiWXwF,E,uKARX,OACE,yBAAK/F,UAAU,sBACb,kBAAC,EAAD,W,GALUM,IAAMC,WClZJyF,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASkD,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef3542b7.chunk.js","sourcesContent":["import React from 'react'; // todo merge wordlist with board info into 1 save\nimport './App.css'; // todo fix resizing tiles\nimport $ from \"jquery\";\nimport _ from 'lodash'\n\nfunction stringify(data) {\n  return JSON.stringify(data);\n}\n\nfunction unstringify(data) {\n  return JSON.parse(data);\n}\n\nfunction save(key, content) {\n  localStorage.setItem(key, content);\n}\n\nfunction load(key) {\n  return localStorage.getItem(key);\n}\n\n// from https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array\nArray.prototype.random = function () {\n  return this[Math.floor((Math.random()*this.length))];\n}\n\nfunction shuffle(a) { // by https://stackoverflow.com/users/353278/jeff\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n  }\n  return a;\n}\n\nString.prototype.format = function () { // by gpvos from stackoverflow\n  var args = arguments;\n  return this.replace(/\\{(\\d+)\\}/g, function (m, n) { return args[n]; });\n};\n\nclass Tile extends React.Component {\n  render() {\n    var bg = this.props.clicked ? \"tile-bg-clicked\" : \"tile-bg\";\n\n    var realText = this.props.useNumbers ? this.props.number : this.props.text;\n    var realText = this.props.freeSpace ? \"Free space!\" : realText;\n\n    // if number mode is on, use bigger text size\n    var largeText = (this.props.useNumbers) ? \"large-text\" : \"\";\n\n    return (\n      <div className={\"tile \" + bg} onClick={() => this.props.onClick()} onContextMenu={(event) => {event.preventDefault(); this.props.onRightClick();}}>\n        <p className={largeText}>{realText}</p>\n      </div>\n    );\n  }\n}\n\nclass TextBox extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <textarea className=\"text-field\" type=\"text\" onChange={(e) => this.props.onChange(e)} id=\"word_pool\" placeholder=\"Enter words here to create randomized boards from a word list! Separate words with a new line.\"/>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.version = \"v0.1.3\";\n    this.veryBigSize = 10;\n    this.defaultSize = 3;\n    this.template = {\n      clicked: false,\n      text: \"Right-click to change text\",\n      number: null,\n    }\n\n    this.state = {\n        wordList: \"\",\n        //title: \"Pinewood Bingo App {0} - Click to edit title\".format(this.version),\n        title: \"Pinewood Bingo App - Click to edit title\",\n        size: this.defaultSize,\n        freeSpace: false,\n        useNumbers: false,\n        minNumber: 1,\n        maxNumber: 100,\n        tiles: Array(Math.pow(this.defaultSize, 2)).fill(this.template),\n    }\n  }\n\n  // total tiles\n  get totalTiles() {\n    return Math.pow(this.state.size, 2);\n  }\n\n  saveWordList() {\n    var save = this.state.wordList;\n\n    var FileSaver = require('file-saver');\n    var blob = new Blob([save], {type: \"text/plain;charset=utf-8\"});\n    FileSaver.saveAs(blob, \"word_list.txt\");\n  }\n\n  updateWordList(e) {\n    this.setState({\n      wordList: e.target.value,\n    })\n  }\n\n  changeTitle() { // todo make the area a set size, so you can fix the title if you input ' '\n    var title = prompt(\"Enter a title for the board:\");\n\n    if (title == null || title == \"\") {\n      return;\n    }\n\n    this.setState({\n      title: title,\n    })\n  }\n\n  getTotalTiles() {\n    return Math.pow(this.state.size, 2)\n  }\n\n  resetClickedTiles() {\n    const tiles = this.state.tiles.slice();\n    for (var x = 0; x < tiles.length; x++) {\n      tiles[x] = {\n        clicked: false,\n        text: tiles[x].text,\n      }\n    }\n    this.setState({\n      size: this.state.size,\n      tiles: tiles,\n    })\n  }\n\n  randomizeFromWordPool() { // todo remove empty lines\n    var pool = this.state.wordList;\n    var words = pool.split(/\\r\\n|\\r|\\n/)\n    const tiles = this.state.tiles.slice();\n    \n    if (words[0] == \"\")\n      return;\n    if (words[words.length-1] == \"\")\n      words.pop();\n    if (words.length < this.getTotalTiles() && !this.hasSeenWordListWarning) {\n      alert(\"The word list has fewer words than tiles in the board.\")\n      return;\n    }\n\n    words = shuffle(words);\n\n    for (var x = 0; x < this.getTotalTiles(); x++) {\n      var word = _.sample(words)\n      tiles[x] = {\n        clicked: false,\n        text: word,\n      };\n      words = words.filter(function(value) {return value != word});\n    }\n\n    this.setState({\n      size: this.state.size,\n      tiles: tiles,\n    })\n\n    //this.resetClickedTiles();\n  }\n\n  randomizeTileOrder() {\n    this.setState({\n      size: this.state.size,\n      tiles: shuffle(this.state.tiles),\n    })\n  }\n\n  saveBoard(mode=\"toFile\") { // todo add option to use toText\n    var save = stringify(this.state);\n\n    if (mode == \"toFile\") {\n      var FileSaver = require('file-saver');\n      var blob = new Blob([save], {type: \"text/plain;charset=utf-8\"});\n      FileSaver.saveAs(blob, \"board.txt\");\n    }\n    else if (mode == \"toText\") {\n      var newWindow = window.open(\"\");\n      newWindow.document.write(save);\n    }\n  }\n\n  async loadBoard(e) {\n    if ($(\"#file_loader\").prop(\"files\").length > 0) {\n      var file = $(\"#file_loader\").prop(\"files\")[0];\n      var reader = new FileReader();\n      var text = await file.text();\n      this.setState(unstringify(text));\n\n      // ideally these would be components as well but laziness\n      $(\"#word_pool\").val(this.state.wordList);\n      $(\"#button_free_space\").prop(\"checked\", this.state.freeSpace);\n      $(\"#button_use_numbers\").prop(\"checked\", this.state.useNumbers);\n      $(\"#button_min_number\").val(this.state.minNumber);\n      $(\"#button_max_number\").val(this.state.maxNumber);\n    }\n  }\n\n  changeSize() {\n    var newSize = parseInt(prompt(\"Enter new size for the board:\"))\n\n    if (newSize == null || newSize == \"\" || newSize < 1) {\n      alert(\"Invalid size; don't be stupid\")\n      return;\n    }\n    else if (newSize > this.veryBigSize) {\n      if (!window.confirm(\"You're creating a very large board (\" + newSize + \"x\" + newSize +\").\\nAre you sure you want to do that?\"))\n        return;\n    }\n\n    this.setState({\n      size: newSize,\n      tiles: Array(Math.pow(newSize, 2)).fill(this.template),\n    })\n  }\n\n  renderTile(i) {\n    const tile = this.state.tiles[i];\n    //var text = tile.text;\n    var freeSpace = false;\n\n    if (Math.floor((Math.pow(this.state.size, 2)) / 2) == i && this.state.freeSpace && this.state.size % 2 != 0)\n      freeSpace = true;\n      // text = \"Free Space!\";\n    // else\n    //   text = tile.text;\n\n    return (<Tile\n      clicked={tile.clicked}\n      freeSpace = {freeSpace}\n      useNumbers={this.state.useNumbers}\n      number={tile.number}\n      text={tile.text}\n      onClick={() => this.handleClick(i)}\n      onRightClick={() => this.handleRightClick(i)}\n      />\n    )\n  }\n\n  handleRightClick(i) {\n    const tiles = this.state.tiles.slice();\n    var input = prompt(\"Enter text for this tile:\");\n\n    if (input == null || input == \"\")\n      return;\n\n    // todo check for duplicates\n    if ($(\"#word_pool\").val() == \"\")\n      $(\"#word_pool\").val($(\"#word_pool\").val() + input)\n    else\n      $(\"#word_pool\").val($(\"#word_pool\").val() + \"\\n\" + input)\n\n    tiles[i] = {\n      clicked: tiles[i].clicked,\n      text: input,\n    };\n\n    this.setState({\n      size: this.state.size,\n      tiles: tiles,\n    })\n  }\n\n  handleClick(i) {\n    const tiles = this.state.tiles.slice();\n\n    tiles[i] = {\n      clicked: !tiles[i].clicked,\n      text: tiles[i].text,\n      number: tiles[i].number,\n    };\n\n    this.setState({\n      size: this.state.size,\n      tiles: tiles,\n    })\n  }\n\n  randomizeNumbers(e) {\n    const tiles = this.state.tiles.slice();\n    var numbersUsed = [];\n\n    // if e is defined that means this function fired from the Randomize Numbers button. Enables number mode if it wasn't already on\n    if (!this.state.useNumbers && e != undefined) {\n      this.toggleNumberMode(true);\n      return;\n    }\n\n    // return if the number range is too small to generate a board without duplicates\n    if (this.state.maxNumber - this.state.minNumber + 1 < this.totalTiles) {\n      alert(\"The number range is too small for the amount of tiles in the current board.\")\n      return;\n    }\n\n    for (var x = 0; x < this.totalTiles; x++) {\n      var num;\n      \n      // we have to make sure numbers do not repeat\n      while (true) { // oh god no add a failsafe here asap\n        num = _.random(this.state.minNumber, this.state.maxNumber)\n\n        if (!numbersUsed.includes(num)) {\n          numbersUsed.push(num);\n          break;\n        }\n      }\n\n      tiles[x] = {\n        clicked: tiles[x].clicked,\n        text: tiles[x].text,\n        number: num\n      }\n\n      // CHANGING PROPERTIES LIKE THIS CAUSES A WEIRD PROBLEM WHERE EVERY TILE HAS THE SAME VALUE.\n      //tiles[x].number = _.random(this.state.minNumber, this.state.maxNumber);\n    }\n\n    this.setState({\n      tiles: tiles,\n    })\n  }\n\n  toggleNumberMode(newState) {\n    if (newState)\n      this.randomizeNumbers();\n    this.setState({useNumbers: newState})\n  }\n\n  render() {\n    const items = [];\n    const tbodies = [];\n    for (var x = 0; x < Math.pow(this.state.size, 2); x++) {\n      items.push(\n        <th key={x}>{this.renderTile(x)}</th>\n      )\n    }\n\n    var index = 0;\n    for (var y = 0; y < this.state.size; y++) {\n      const row = []\n      for (var z = 0; z < this.state.size; z++) {\n        row.push(items[index]);\n        index++;\n      }\n      tbodies.push(\n        <tr key={y}>{row}</tr>\n      )\n    }\n\n    return (\n      <div className=\"flex-main\">\n        <div>\n          <h1 onClick={() => this.changeTitle()}>{this.state.title}</h1>\n          <table className=\"tile-holder\">\n            <tbody>\n              {tbodies}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"right-panel\">\n          <TextBox onChange={(e) => this.updateWordList(e)}/>\n          <div className=\"button-bar\">\n            <button className=\"large-button\" onClick={() => this.randomizeFromWordPool()}>Generate Board from Word List</button>\n            <button onClick={() => this.changeSize()}>Change Size</button>\n            <button onClick={() => this.randomizeTileOrder()}>Shuffle Tiles</button>\n            <button onClick={() => this.saveBoard()}>Save Board</button>\n            <button onClick={() => $(\"#file_loader\").click()}>Load Board</button>\n            <input onChange={(e) => this.loadBoard(e)} className=\"hidden\" type=\"file\" accept=\".txt\" id=\"file_loader\"></input>\n            {/* <button onClick={() => this.saveWordList()}>Save Word List</button> */}\n            <div className=\"checkbox\">\n              <input id=\"button_free_space\" onChange={(e) => {this.setState({freeSpace: e.target.checked})}} className=\"\" type=\"checkbox\"></input>\n              <p>Free Space</p>\n            </div>\n            <div className=\"checkbox\">\n              <input id=\"button_use_numbers\" onChange={(e) => {this.toggleNumberMode(e.target.checked)}} className=\"\" type=\"checkbox\"></input>\n              <p>Use Numbers</p>\n            </div>\n            <div className=\"checkbox\">\n              <p>Min:</p>\n              <input id=\"button_min_number\" onChange={(e) => {this.setState({minNumber: e.target.value})}} className=\"number-input\" type=\"number\" value={this.state.minNumber}></input>\n            </div>\n            <div className=\"checkbox\">\n              <p>Max:</p>\n              <input id=\"button_max_number\" onChange={(e) => {this.setState({maxNumber: e.target.value})}} className=\"number-input\" type=\"number\" value={this.state.maxNumber}></input>\n            </div>\n            <div className=\"centered-button\">\n            <button onClick={(e) => this.randomizeNumbers(e)}>Randomize Numbers</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"flex-center-column\">\n        <Board/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport $ from \"jquery\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}